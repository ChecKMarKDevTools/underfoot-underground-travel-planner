pre-commit:
  parallel: true
  commands:
    format-and-lint:
      run: |
        STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(js|ts|jsx|tsx|md|json)$' || true)
        if [ -n "$STAGED_FILES" ] && command -v npm &> /dev/null; then
          echo "$STAGED_FILES" | xargs -r npm run format 2>/dev/null || true
          echo "$STAGED_FILES" | xargs -r npm run lint 2>/dev/null || true
          echo "$STAGED_FILES" | xargs -r git add
        fi
    python-format:
      run: |
        STAGED_PY=$(git diff --cached --name-only --diff-filter=ACM | grep '\.py$' || true)
        if [ -n "$STAGED_PY" ] && command -v poetry &> /dev/null; then
          if [ -d "backend" ]; then
            # When running inside backend/, strip the leading 'backend/' prefix
            # so paths are correct relative to that directory and we don't
            # end up with backend/backend/.. paths.
            REL_PY=$(echo "$STAGED_PY" | sed -E 's#^backend/##' | tr '\n' ' ')
            (cd backend && poetry run black $REL_PY 2>/dev/null) || true
            (cd backend && poetry run ruff check --fix $REL_PY 2>/dev/null) || true
            echo "$STAGED_PY" | xargs -r git add
          else
            # Fallback: run black/ruff from repo root on the staged paths
            poetry run black $STAGED_PY 2>/dev/null || true
            poetry run ruff check --fix $STAGED_PY 2>/dev/null || true
            echo "$STAGED_PY" | xargs -r git add
          fi
        fi
    spellcheck:
      run: |
        STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM)
        if [ -n "$STAGED_FILES" ] && command -v npx &> /dev/null; then
          npx cspell --show-suggestions $STAGED_FILES 2>/dev/null || true
        fi

pre-push:
  parallel: true
  commands:
    frontend-tests:
      run: |
        if [ -d "frontend" ] && command -v npm &> /dev/null; then
          cd frontend && npm test 2>/dev/null || true
        fi
    backend-tests:
      run: |
        if [ -d "backend" ] && command -v poetry &> /dev/null; then
          cd backend && poetry run pytest 2>/dev/null || true
        fi

commit-msg:
  parallel: true
  commands:
    commitlint:
      run: |
        if command -v npm &> /dev/null; then
          OUTPUT=$(npm run commitlint -- {1} 2>&1)
          echo "$OUTPUT"
          STATUS=$?
          if [ $STATUS -ne 0 ]; then
            exit $STATUS
          fi
          if echo "$OUTPUT" | grep -qi "warning"; then
            echo "Commit message contains warnings (treated as errors by lefthook)." >&2
            exit 1
          fi
        fi
