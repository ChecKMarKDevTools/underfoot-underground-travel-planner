{
  "name": "wf_serp_search_tool",
  "nodes": [
    {
      "parameters": {
        "workflowInputs": {
          "values": [
            {
              "name": "intent"
            },
            {
              "name": "location"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [-304, -240],
      "id": "02b0b089-f143-4659-9ee2-5ba00affb9c8",
      "name": "workflow_trigger",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "wRCvCmRGcILIoLjy",
          "mode": "list",
          "cachedResultName": "Underfoot â€” wf_error_notifications"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "callingWorkflow": "={{ $workflow }}",
            "input": "={{ $input.all() }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "callingWorkflow",
              "displayName": "callingWorkflow",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "object"
            },
            {
              "id": "input",
              "displayName": "input",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "array",
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [1488, -48],
      "id": "f167f2ba-cae4-4474-88a8-1b3a08000fce",
      "name": "trigger_discord_notifier"
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\nconst now = new Date().toISOString();\n\nconst syrupInput = items[0];\nconst syrupBody = typeof syrupInput.json.body === \"string\"\n  ? (() => { try { return JSON.parse(syrupInput.json.body); } catch { return {}; } })()\n  : syrupInput.json.body || {};\nconst gen = syrupBody.general || {};\nconst nav = syrupBody.navigation || [];\nconst organic = syrupBody.organic || [];\nconst featured = syrupBody.featured_snippet || {};\nconst knowledge = syrupBody.knowledge_panel || {};\nconst inputMeta = syrupBody.input || {};\nconst search_url = inputMeta.original_url || syrupInput.url || null;\nconst search_time = gen.timestamp || now;\n\nconst geoInput = items[1];\nconst geoResult = syrupInput.json.results?.[0] || {};\nconst user_intent = syrupInput.json.query?.text ?? gen.query ?? null;\nconst user_location = geoResult.formatted || geoResult.address_line1 || gen.location || null;\nconst latitude = geoResult.lat ?? null;\nconst longitude = geoResult.lon ?? null;\n\nconst allResults = [];\nfunction pushIfValid(item) {\n  if (!item || !item.title || !item.link) return;\n  allResults.push({\n    title: item.title,\n    url: item.link,\n    description: item.snippet || item.description || \"unknown\",\n    search_url,\n    cached_at: search_time,\n    user_intent,\n    user_location,\n    latitude,\n    longitude\n  });\n}\n\n// 1. Try ORGANIC results (normal blue links)\nif (Array.isArray(organic) && organic.length) organic.forEach(pushIfValid);\n\n// 2. Fallback: featured snippet (if present)\nif (!allResults.length && featured && featured.title && featured.link) {\n  allResults.push({\n    title: featured.title,\n    url: featured.link,\n    description: featured.snippet || \"unknown\",\n    search_url,\n    cached_at: search_time,\n    user_intent,\n    user_location,\n    latitude,\n    longitude\n  });\n}\n\n// 3. Fallback: knowledge panel (if present)\nif (!allResults.length && knowledge && knowledge.title && knowledge.link) {\n  allResults.push({\n    title: knowledge.title,\n    url: knowledge.link,\n    description: knowledge.snippet || knowledge.description || \"unknown\",\n    search_url,\n    cached_at: search_time,\n    user_intent,\n    user_location,\n    latitude,\n    longitude\n  });\n}\n\n// 4. Optional: try navigation links (they're not always blue links, but sometimes used)\nif (!allResults.length && Array.isArray(nav) && nav.length) nav.forEach(pushIfValid);\n\n// 5. Final fallback: \"No Results\"\nif (!allResults.length) {\n  allResults.push({\n    title: \"(No Results)\",\n    url: null,\n    description: \"unknown\",\n    search_url,\n    cached_at: search_time,\n    user_intent,\n    user_location,\n    latitude,\n    longitude\n  });\n}\n\nreturn allResults;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1040, -336],
      "id": "978a9717-ecc2-4d14-a4cb-ace44d210587",
      "name": "normalize_search_results",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "useCustomSchema": true,
        "schema": "underfoot",
        "operation": "getAll",
        "tableId": "google_geotarget_lookup",
        "limit": 1,
        "filters": {
          "conditions": [
            {
              "keyName": "canonical_name",
              "condition": "ilike",
              "keyValue": "=*{{ $json.results[0].city }}*"
            },
            {
              "keyName": "canonical_name",
              "condition": "ilike",
              "keyValue": "=*{{ $json.results[0].state }}*"
            },
            {
              "keyName": "name",
              "condition": "ilike",
              "keyValue": "=*{{ $json.results[0].city }}*"
            },
            {
              "keyName": "name",
              "condition": "ilike",
              "keyValue": "=*{{ $json.results[0].state }}*"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [144, 224],
      "id": "49959e20-5549-4362-a34a-68ba38577bfd",
      "name": "find_canonical_location",
      "alwaysOutputData": false,
      "credentials": {
        "supabaseApi": {
          "id": "dDCJFuMX57sfkIIp",
          "name": "supabase_secret_key"
        }
      },
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "zone": {
          "__rl": true,
          "value": "unlocker_serp",
          "mode": "list",
          "cachedResultName": "unlocker_serp"
        },
        "country": {
          "__rl": true,
          "mode": "list",
          "value": "us"
        },
        "url": "=https://www.google.com/search?q={{ $json.intent }}&gl={{ $json.country_code }}&uule={{ $json.location }}&hl=en&num=10&tbs=qdr:w2&brd_json=1",
        "format": "json",
        "requestOptions": {
          "timeout": 1200000
        }
      },
      "type": "@brightdata/n8n-nodes-brightdata.brightData",
      "typeVersion": 1,
      "position": [592, 272],
      "id": "4c08c06c-1839-4345-846a-2cf3fbf1b992",
      "name": "google_serp_search",
      "credentials": {
        "brightdataApi": {
          "id": "mPoDSDYWpK4VnaD4",
          "name": "brightdata_primary_api_token"
        }
      },
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://{{ $vars.SUPABASE_PROJECT_ID }}.supabase.co/functions/v1/merge-cache",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "supabaseApi",
        "sendHeaders": true,
        "specifyHeaders": "json",
        "jsonHeaders": "={\n  \"apikey\": \"Bearer sb_publishable_GGmdXRPaPAibIOuVbWmZTA_l80jGSml\",\n  \"Authorization\": \"Bearer sb_publishable_GGmdXRPaPAibIOuVbWmZTA_l80jGSml\",\n  \"Content-Type\": \"application/json\"\n}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n\"title\": \"{{ $json.title}}\",\n\"description\": \"{{ $json.description }}\",\n\"source_type\": \"{{ $workflow.name || $workflow.id }}\",\n\"external_id\": \"{{ $execution.id}}\",\n\"url\": \"{{ $json.url }}\",\n\"image_url\": null,\n\"data\": null,\n\"embedding\": null,\n\"created_at\": \"{{ $now.toUTC() }}\",\n\"updated_at\": \"{{ $now.toUTC() }}\",\n\"owner_id\": \"4c3b8878-cd4c-40ff-bd0e-3df5612aa9ff\"\n}",
        "options": {
          "timeout": 1200000
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1264, -464],
      "id": "17f3769c-2bd0-41d8-ad29-ddcf6c3663a1",
      "name": "update_cache",
      "credentials": {
        "httpQueryAuth": {
          "id": "64boXnNUJyTXiROn",
          "name": "GEOAPIFY_API_KEY"
        },
        "supabaseApi": {
          "id": "NabDZqnQNq4nPLYM",
          "name": "supabase_anon_key"
        }
      },
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "numberInputs": 3,
        "options": {
          "includeUnpaired": false
        }
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [816, -272],
      "id": "ebbf1faf-6003-4676-9f6b-2e78c22d46a3",
      "name": "add_provenance",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const intent = encodeURI($('workflow_trigger').item.json.intent);\nconst location = encodeURI($json.canonical_name);\nconst country_code = encodeURI($json.country_code.toLowerCase());\n\nreturn { intent, location, country_code };"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [368, 272],
      "id": "c278437d-8509-42bb-ae97-2dc14e9b2f4c",
      "name": "generate_search_terms"
    },
    {
      "parameters": {
        "url": "https://api.geoapify.com/v1/geocode/search",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpQueryAuth",
        "sendQuery": true,
        "specifyQuery": "json",
        "jsonQuery": "={\n  \"format\": \"json\",\n  \"limit\": 1,\n  \"text\": \"{{ $json.location }}\",\n  \"lang\": \"en\"\n}",
        "options": {
          "timeout": 10000
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [-80, -80],
      "id": "1963fc52-509a-40c9-9309-7b63e4da1997",
      "name": "call_geoapify_search",
      "credentials": {
        "httpQueryAuth": {
          "id": "64boXnNUJyTXiROn",
          "name": "GEOAPIFY_API_KEY"
        }
      },
      "onError": "continueErrorOutput"
    }
  ],
  "pinData": {},
  "connections": {
    "workflow_trigger": {
      "main": [
        [
          {
            "node": "add_provenance",
            "type": "main",
            "index": 2
          },
          {
            "node": "call_geoapify_search",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "normalize_search_results": {
      "main": [
        [
          {
            "node": "update_cache",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "trigger_discord_notifier",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "find_canonical_location": {
      "main": [
        [
          {
            "node": "generate_search_terms",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "trigger_discord_notifier",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "google_serp_search": {
      "main": [
        [
          {
            "node": "add_provenance",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "trigger_discord_notifier",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "update_cache": {
      "main": [
        [],
        [
          {
            "node": "trigger_discord_notifier",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "add_provenance": {
      "main": [
        [
          {
            "node": "normalize_search_results",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "trigger_discord_notifier",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "generate_search_terms": {
      "main": [
        [
          {
            "node": "google_serp_search",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "call_geoapify_search": {
      "main": [
        [
          {
            "node": "add_provenance",
            "type": "main",
            "index": 1
          },
          {
            "node": "find_canonical_location",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "trigger_discord_notifier",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1",
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": "g0RA1ILyuSMHbt6q"
  },
  "versionId": "4e099c17-a704-4462-8c2c-d6d8fa98d1e0",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "ca38a51753a4eaa26e21803b676daa6c69ce9542656c83ba5959cacf3a748990"
  },
  "id": "So4ty17033VQwdOO",
  "tags": []
}
