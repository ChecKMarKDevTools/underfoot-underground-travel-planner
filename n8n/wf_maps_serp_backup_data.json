{
  "name": "wf_maps_serp_backup_data",
  "nodes": [
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "wRCvCmRGcILIoLjy",
          "mode": "list",
          "cachedResultName": "Underfoot — wf_error_notifications"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "json": "={{ $json }}"
          },
          "matchingColumns": ["json"],
          "schema": [
            {
              "id": "json",
              "displayName": "json",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "object",
              "removed": false
            },
            {
              "id": "callingWorkflow",
              "displayName": "callingWorkflow",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "object",
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "mode": "each",
        "options": {
          "waitForSubWorkflow": false
        }
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [1408, -416],
      "id": "60dbc180-14f5-42cd-94ef-393f688a4cbe",
      "name": "call_error_notifier",
      "retryOnFail": false
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.brightdata.com/request",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "brightdataApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"zone\": \"serp_api1\",\n  \"url\": \"{{$json.url}}\",\n  \"format\": \"raw\",\n  \"headers\": {\n    \"x-unblock-data-format\": \"parsed_light\"\n  }\n}",
        "options": {
          "timeout": 10000
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [736, -488],
      "id": "2b881369-048e-482f-91c5-c7ef5cbf096e",
      "name": "brightdata_serp_api",
      "executeOnce": false,
      "retryOnFail": true,
      "credentials": {
        "brightdataApi": {
          "id": "mPoDSDYWpK4VnaD4",
          "name": "brightdata_primary_api_token"
        }
      },
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "workflowInputs": {
          "values": [
            {
              "name": "intent"
            },
            {
              "name": "location"
            },
            {}
          ]
        }
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [64, -416],
      "id": "74f79f8d-6497-4bbe-affc-15fe82493c65",
      "name": "workflow_trigger",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Build a Google Maps search URL from intent + location.\n// Output example: https://www.google.com/maps/search/hotels+new+york/\nfunction mapsSearchURL(intent, location) {\n  const norm = (s) => (s ?? \"\").toString().trim().replace(/\\s+/g, \" \");\n  const query = [norm(intent), norm(location)].filter(Boolean).join(\" \");\n  if (!query) throw new Error(\"Provide at least an intent or a location\");\n  const encoded = encodeURIComponent(query).replace(/%20/g, \"+\");\n  return `https://www.google.com/maps/search/${encoded}/`;\n}\n\nreturn { \"url\": mapsSearchURL($json.intent, $json.location) };"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [512, -416],
      "id": "12a68956-31fd-44f9-a28e-5a7ed09e8c93",
      "name": "format_search_url",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "jsCode": "// n8n Code node — Run Once for All Items\n// Normalizes an incoming array (or list of items) into a flat array with the required columns.\n// Expected output fields per item:\n// url, title, description, rank, global_rank, query, language, location, latitude, longitude, original_url, cached_at\n\n// Helper: pull possible context (query/language/cached_at) from the first input\nconst first = $input.first()?.json ?? {};\nconst ctx = {\n  // common places your upstream may stash these\n  query: first.query ?? first.general?.query ?? null,\n  language: first.language ?? first.general?.language ?? null,\n  cached_at: first.cached_at ?? first.general?.cached_at ?? new Date().toISOString(),\n  global_rank: first.global_rank ?? null,\n};\n\n// Collect candidate arrays from inputs.\n// Supports: \n//  - a single item where json is an array of results\n//  - a single item where results live under json.items or json.organic\n//  - multiple input items where each json is already a single result\nlet candidates = [];\n\n// Case A: one input, array directly in json\nif (Array.isArray(first)) {\n  candidates = first;\n} else if (Array.isArray(first.items)) {\n  candidates = first.items;\n} else if (Array.isArray(first.organic)) {\n  candidates = first.organic;\n} else {\n  // Case B: many input items (each one result)\n  const all = $input.all().map(i => i.json);\n  // If these are already the result objects (have 'link'/'title'), use them.\n  // Otherwise, if any has an embedded array, flatten those.\n  const looksLikeResult = obj => obj && (obj.link || obj.title || obj.address || obj.latitude || obj.longitude);\n  if (all.length && all.every(looksLikeResult)) {\n    candidates = all;\n  } else {\n    for (const obj of all) {\n      if (Array.isArray(obj)) candidates.push(...obj);\n      if (Array.isArray(obj?.items)) candidates.push(...obj.items);\n      if (Array.isArray(obj?.organic)) candidates.push(...obj.organic);\n    }\n  }\n}\n\n// Normalize each candidate\nreturn candidates.map((it) => {\n  // Prefer explicit description; fall back to summary\n  const description =\n    typeof it.description === 'string' ? it.description\n    : typeof it.description?.text === 'string' ? it.description.text\n    : it.summary ?? null;\n\n  // Canonical address → use provided address if present\n  const location = it.address ?? it.location?.address ?? null;\n\n  // URL handling: we can’t resolve redirects here, so keep both the same\n  const url = it.link ?? it.map_link ?? null;\n  const original_url = it.link ?? null;\n\n  return {\n    url,\n    title: it.title ?? null,\n    description,\n    rank: it.rank ?? null,\n    global_rank: ctx.global_rank,     // pass-through from context if available\n    query: ctx.query,\n    language: ctx.language,\n    location,                         // canonical address\n    latitude: it.latitude ?? null,\n    longitude: it.longitude ?? null,\n    original_url,\n    source: `${ $workflow.name}:${ $execution.id }`,\n    cached_at: ctx.cached_at,\n  };\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [960, -608],
      "id": "4a5cceeb-6d65-4d08-a4ec-430b758e4dc6",
      "name": "normalize",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "operation": "appendOrUpdate",
        "documentId": {
          "__rl": true,
          "value": "1yA7rRZkgJAGrs6SiGVqHJmwcORunAmM2Mw1KecXcS4A",
          "mode": "list",
          "cachedResultName": "underfoot_google_maps_serp_cache",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1yA7rRZkgJAGrs6SiGVqHJmwcORunAmM2Mw1KecXcS4A/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1yA7rRZkgJAGrs6SiGVqHJmwcORunAmM2Mw1KecXcS4A/edit#gid=0"
        },
        "columns": {
          "mappingMode": "autoMapInputData",
          "value": {},
          "matchingColumns": ["url"],
          "schema": [
            {
              "id": "url",
              "displayName": "url",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "title",
              "displayName": "title",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "description",
              "displayName": "description",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "rank",
              "displayName": "rank",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "global_rank",
              "displayName": "global_rank",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "query",
              "displayName": "query",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "language",
              "displayName": "language",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "location",
              "displayName": "location",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "latitude",
              "displayName": "latitude",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "longitude",
              "displayName": "longitude",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "original_url",
              "displayName": "original_url",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "cached_at",
              "displayName": "cached_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "user_intent",
              "displayName": "user_intent",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "user_location",
              "displayName": "user_location",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {
          "handlingExtraData": "ignoreIt",
          "useAppend": true
        }
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [1184, -608],
      "id": "75ba4e97-b3cc-410d-9c2c-b14cdcc48293",
      "name": "update_cache",
      "retryOnFail": false,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "LlE3kL9RL6ALt0Sy",
          "name": "Google Sheets Primary"
        }
      },
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "url": "=https://api.geoapify.com/v1/geocode/search",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpQueryAuth",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "text",
              "value": "={{ $json.location }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [288, -416],
      "id": "fb5f1e60-8b0c-44a1-9e46-aeee3360a1fa",
      "name": "normalize_location_with_geoapify",
      "credentials": {
        "httpCustomAuth": {
          "id": "tFONdKuC2m4mZWzj",
          "name": "BRIGHTDATA_SERP_PROXY"
        },
        "httpQueryAuth": {
          "id": "64boXnNUJyTXiROn",
          "name": "GEOAPIFY_API_KEY"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://uqvwaiexsgprdbdecoxx.supabase.co/functions/v1/merge-cache",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBearerAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"title\": {{ $json.title }},\n  \"description\": {{ $json.description }},\n  \"source_type\": {{ $workflow.name }},\n  \"external_id\": {{ $execution.id }},\n  \"url\": {{ $json.url }},\n  \"image_url\": {{ $json.image_url }},\n  \"data\": {{ $json }}\n}",
        "options": {
          "timeout": 120000
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1184, -800],
      "id": "54cb6808-c0ea-4d70-9290-c5df176da0f5",
      "name": "update_cache_supabase",
      "credentials": {
        "httpBearerAuth": {
          "id": "qmIqRK2uopxYSrFs",
          "name": "SUPABASE_BEARER_AUTH"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "brightdata_serp_api": {
      "main": [
        [
          {
            "node": "normalize",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "call_error_notifier",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "workflow_trigger": {
      "main": [
        [
          {
            "node": "normalize_location_with_geoapify",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "call_error_notifier": {
      "main": [[]]
    },
    "format_search_url": {
      "main": [
        [
          {
            "node": "brightdata_serp_api",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "call_error_notifier",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "normalize": {
      "main": [
        [
          {
            "node": "update_cache_supabase",
            "type": "main",
            "index": 0
          },
          {
            "node": "update_cache",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "call_error_notifier",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "update_cache": {
      "main": [
        [],
        [
          {
            "node": "call_error_notifier",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "normalize_location_with_geoapify": {
      "main": [
        [
          {
            "node": "format_search_url",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "update_cache_supabase": {
      "main": [[]]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1",
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": "g0RA1ILyuSMHbt6q"
  },
  "versionId": "fe33b9bf-af90-44b9-8c4a-7e27fc751e24",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "ca38a51753a4eaa26e21803b676daa6c69ce9542656c83ba5959cacf3a748990"
  },
  "id": "TjJFvBLuhBlEO3c8",
  "tags": []
}
